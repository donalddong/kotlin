package

public fun f1(/*0*/ e: kotlin.Experimental): kotlin.Unit
public fun f2(/*0*/ u: kotlin.UseExperimental): kotlin.Unit
public fun f3(/*0*/ e: Experimental0 /* = kotlin.Experimental */): kotlin.Unit
public fun f4(/*0*/ u: UseExperimental0 /* = kotlin.UseExperimental */): kotlin.Unit
@A(k = {kotlin.Experimental::class, kotlin.UseExperimental::class}) public fun f5(): kotlin.Unit
public fun f6(/*0*/ m: Marker): kotlin.Unit
public fun f7(): kotlin.collections.List<Marker>?
public fun f8(/*0*/ m: Marker0 /* = Marker */): kotlin.Unit

public final annotation class A : kotlin.Annotation {
    public constructor A(/*0*/ vararg k: kotlin.reflect.KClass<*> /*kotlin.Array<out kotlin.reflect.KClass<*>>*/)
    public final val k: kotlin.Array<out kotlin.reflect.KClass<*>>
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

@kotlin.Experimental public final annotation class Marker : kotlin.Annotation {
    public constructor Marker()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
public typealias Experimental0 = kotlin.Experimental
public typealias Marker0 = Marker
public typealias UseExperimental0 = kotlin.UseExperimental
